#
# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@com_github_grpc_grpc//bazel:python_rules.bzl", "py_proto_library")
load("//bazel:bison.bzl", "genyacc")
load("//bazel:flex.bzl", "genlex")
load("//bazel:textmapper.bzl", "tm_syntax")

# Placeholder: load py_proto_library
# Placeholder: load py_binary
# Placeholder: load py_library
# Placeholder: load py_test
load(":builddefs.bzl", "gen_parser_test")

package(
    default_visibility = ["//zetasql/base:zetasql_implementation"],
)

genrule(
    name = "gen_extra_files",
    srcs = [
        "parse_tree_generated.h",
    ],
    outs = [
        "parse_tree_visitor.h",
        "parse_tree_decls.h",
        "parse_tree_accept_methods.inc",
    ],
    cmd = "$(location :gen_extra_files_tool) $(SRCS) $(OUTS)",
    tools = [":gen_extra_files_tool"],
)

py_binary(
    name = "gen_extra_files_tool",
    srcs = ["gen_extra_files.py"],
    main = "gen_extra_files.py",
    python_version = "PY3",
    deps = [
    ],
)

genrule(
    name = "gen_parse_tree_h",
    srcs = [
        "parse_tree_generated.h.template",
    ],
    outs = ["parse_tree_generated.h"],
    cmd = "$(location :gen_parse_tree) $(OUTS) $(SRCS)",
    tools = [":gen_parse_tree"],
)

genrule(
    name = "gen_parse_tree_cc",
    srcs = [
        "parse_tree_generated.cc.template",
    ],
    outs = ["parse_tree_generated.cc"],
    cmd = "$(location :gen_parse_tree) $(OUTS) $(SRCS)",
    tools = [":gen_parse_tree"],
)

genrule(
    name = "gen_ast_node_kind_h",
    srcs = [
        "ast_node_kind.h.template",
    ],
    outs = ["ast_node_kind.h"],
    cmd = "$(location :gen_parse_tree) $(OUTS) $(SRCS)",
    tools = [":gen_parse_tree"],
)

genrule(
    name = "gen_protos",
    srcs = [
        "parse_tree.proto.template",
    ],
    outs = ["parse_tree.proto"],
    cmd = "$(location :gen_parse_tree) $(OUTS) $(SRCS)",
    tools = [":gen_parse_tree"],
)

genrule(
    name = "gen_parse_tree_serializer_cc",
    srcs = [
        "parse_tree_serializer.cc.template",
    ],
    outs = ["parse_tree_serializer.cc"],
    cmd = "$(location :gen_parse_tree) $(OUTS) $(SRCS)",
    tools = [":gen_parse_tree"],
)

genrule(
    name = "gen_parse_tree_serializer_headers",
    srcs = [
        "parse_tree_serializer.h.template",
    ],
    outs = ["parse_tree_serializer.h"],
    cmd = "$(location :gen_parse_tree) $(OUTS) $(SRCS)",
    tools = [":gen_parse_tree"],
)

proto_library(
    name = "parse_tree_proto",
    srcs = ["parse_tree.proto"],
    deps = [
        ":ast_enums_proto",
        "//zetasql/public:parse_location_range_proto",
        "//zetasql/public:type_proto",
    ],
)

cc_proto_library(
    name = "parse_tree_cc_proto",
    deps = [":parse_tree_proto"],
)

py_proto_library(
    name = "parse_tree_py_proto",
    deps = [":parse_tree_proto"],
)

py_library(
    name = "generator_utils",
    srcs = ["generator_utils.py"],
)

py_test(
    name = "generator_utils_test",
    size = "small",
    srcs = ["generator_utils_test.py"],
    python_version = "PY3",
    deps = [
        ":generator_utils",
        "@io_abseil_py//absl/testing:absltest",
    ],
)

py_binary(
    name = "gen_parse_tree",
    srcs = ["gen_parse_tree.py"],
    main = "gen_parse_tree.py",
    deps = [
        ":ast_enums_py_pb2",
        ":generator_utils",
        "@io_abseil_py//absl:app",
        "@io_abseil_py//absl/flags",
        "@jinja//:jinja2",
    ],
)

proto_library(
    name = "ast_enums_proto",
    srcs = ["ast_enums.proto"],
)

cc_proto_library(
    name = "ast_enums_cc_proto",
    deps = [":ast_enums_proto"],
)

java_proto_library(
    name = "ast_enums_java_proto",
    deps = [":ast_enums_proto"],
)

java_proto_library(
    name = "ast_java_proto",
    deps = [":parse_tree_proto"],
)

py_proto_library(
    name = "ast_enums_py_pb2",
    deps = [":ast_enums_proto"],
)

py_proto_library(
    name = "ast_py_proto",
    deps = [":parse_tree_proto"],
)

cc_library(
    name = "parser",
    srcs = [
        "ast_node_internal.h",
        "bison_parser.cc",
        "bison_parser.h",
        "parser.cc",
        "unparser.cc",
    ],
    hdrs = [
        "ast_node.h",
        "ast_node_kind.h",
        "parse_tree.h",
        "parse_tree_decls.h",
        "parse_tree_errors.h",
        "parse_tree_visitor.h",
        "parser.h",
        "parser_runtime_info.h",
        "statement_properties.h",
        "unparser.h",
        "visit_result.h",
    ],
    tags = ["nofixdeps"],  # generated and real files are interdependent
    deps = [
        ":ast_enums_cc_proto",
        ":bison_parser_generated_lib",
        ":bison_parser_mode",
        ":flex_istream",
        ":flex_tokenizer",
        ":keywords",
        ":lookahead_transformer",
        ":parse_tree",
        "//bazel:flex",
        "//zetasql/base",
        "//zetasql/base:arena",
        "//zetasql/base:arena_allocator",
        "//zetasql/base:check",
        "//zetasql/base:map_util",
        "//zetasql/base:ret_check",
        "//zetasql/base:status",
        "//zetasql/base:strings",
        "//zetasql/common:errors",
        "//zetasql/common:thread_stack",
        "//zetasql/common:timer_util",
        "//zetasql/common:utf_util",
        "//zetasql/parser/macros:macro_catalog",
        "//zetasql/parser/macros:macro_expander",
        "//zetasql/proto:internal_error_location_cc_proto",
        "//zetasql/public:error_helpers",
        "//zetasql/public:error_location_cc_proto",
        "//zetasql/public:id_string",
        "//zetasql/public:language_options",
        "//zetasql/public:options_cc_proto",
        "//zetasql/public:parse_location",
        "//zetasql/public:parse_resume_location",
        "//zetasql/public:strings",
        "//zetasql/public:type",
        "//zetasql/public:type_cc_proto",
        "//zetasql/public/proto:logging_cc_proto",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/cleanup",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:span",
        "@com_google_absl//absl/types:variant",
        "@com_googlesource_code_re2//:re2",
    ],
)

cc_library(
    name = "bison_parser_mode",
    hdrs = [
        "bison_parser_mode.h",
    ],
)

cc_library(
    name = "flex_tokenizer",
    srcs = [
        "flex_tokenizer.cc",
        "flex_tokenizer.cc.inc",
        "flex_tokenizer.flex.cc",
    ],
    hdrs = [
        "flex_tokenizer.h",
    ],
    copts = [
        # Flex generates switches with implicit fallthrough. We must turn this
        # warning off for the generated flex code to compile.
        "-Wno-implicit-fallthrough",
    ],
    deps = [
        ":bison_token_codes",
        ":flex_istream",
        "//bazel:flex",
        "//zetasql/base:check",
        "//zetasql/base:status",
        "//zetasql/common:errors",
        "//zetasql/public:language_options",
        "//zetasql/public:parse_location",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

cc_library(
    name = "lookahead_transformer",
    srcs = ["lookahead_transformer.cc"],
    hdrs = ["lookahead_transformer.h"],
    deps = [
        ":bison_parser_mode",
        ":bison_token_codes",
        "//zetasql/base:arena",
        "//zetasql/base:check",
        "//zetasql/base:ret_check",
        "//zetasql/base:status",
        "//zetasql/common:errors",
        "//zetasql/parser/macros:flex_token_provider",
        "//zetasql/parser/macros:macro_catalog",
        "//zetasql/parser/macros:macro_expander",
        "//zetasql/parser/macros:token_with_location",
        "//zetasql/public:error_helpers",
        "//zetasql/public:language_options",
        "//zetasql/public:parse_location",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_test(
    name = "lookahead_transformer_test",
    srcs = [
        "lookahead_transformer_test.cc",
    ],
    deps = [
        ":bison_parser_mode",
        ":bison_token_codes",
        ":lookahead_transformer",
        "//zetasql/base:arena",
        "//zetasql/base:check",
        "//zetasql/base:ret_check",
        "//zetasql/base:status",
        "//zetasql/base/testing:status_matchers",
        "//zetasql/base/testing:zetasql_gtest_main",
        "//zetasql/parser",
        "//zetasql/parser/macros:macro_catalog",
        "//zetasql/parser/macros:token_with_location",
        "//zetasql/public:language_options",
        "//zetasql/public:parse_location",
        "//zetasql/public:parse_resume_location",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "ast_node_util",
    srcs = ["ast_node_util.cc"],
    hdrs = ["ast_node_util.h"],
    deps = [":parser"],
)

cc_test(
    name = "ast_node_util_test",
    srcs = ["ast_node_util_test.cc"],
    deps = [
        ":ast_node_util",
        ":parse_tree_serializer",
        "//zetasql/base/testing:status_matchers",
        "//zetasql/base/testing:zetasql_gtest_main",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "bison_parser_generated_lib",
    srcs = [
        "bison_parser.bison.cc",
        "join_processor.cc",
    ],
    hdrs = [
        "bison_parser.bison.h",
        "bison_parser.h",
        "join_processor.h",
        "parser_internal.h",
        "parser_runtime_info.h",
        "statement_properties.h",
    ],
    # The -O2 is required because the generated bison parser uses a ton of
    # stack space in non-optimized builds. The entire parser is contained in
    # a single giant function, and non-optimized compilation does not reuse
    # stack slots for local variables. Without -O2, clients are likely to
    # fail in fastbuild with default 64KB stack sizes, or to start failing
    # when the parser is extended further.
    copts = [
        "-O2",
    ],
    tags = ["nofixdeps"],  # generated and real files are interdependent
    deps = [
        ":bison_parser_mode",
        ":bison_token_codes",
        ":keywords",
        ":parse_tree",
        "//bazel:flex",
        "//zetasql/base",
        "//zetasql/base:arena",
        "//zetasql/base:arena_allocator",
        "//zetasql/base:check",
        "//zetasql/base:ret_check",
        "//zetasql/base:status",
        "//zetasql/base:strings",
        "//zetasql/common:errors",
        "//zetasql/common:timer_util",
        "//zetasql/parser/macros:macro_catalog",
        "//zetasql/parser/macros:token_with_location",
        "//zetasql/public:id_string",
        "//zetasql/public:language_options",
        "//zetasql/public:options_cc_proto",
        "//zetasql/public:parse_location",
        "//zetasql/public:strings",
        "//zetasql/public:type_cc_proto",
        "//zetasql/public/proto:logging_cc_proto",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:span",
    ],
)

cc_library(
    name = "flex_istream",
    hdrs = ["flex_istream.h"],
    deps = ["@com_google_absl//absl/strings"],
)

cc_test(
    name = "flex_istream_test",
    srcs = ["flex_istream_test.cc"],
    deps = [
        ":flex_istream",
        "//zetasql/base/testing:status_matchers",
        "//zetasql/base/testing:zetasql_gtest_main",
        "//zetasql/public:parse_helpers",
        "//zetasql/public:parse_resume_location",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
    ],
)

cc_library(
    name = "parse_tree_serializer",
    srcs = ["parse_tree_serializer.cc"],
    hdrs = [
        "parse_tree_serializer.h",
        "parser.h",
        "statement_properties.h",
    ],
    deps = [
        ":bison_parser_generated_lib",
        ":parse_tree",
        ":parse_tree_cc_proto",
        "//zetasql/base:arena",
        "//zetasql/base:check",
        "//zetasql/base:status",
        "//zetasql/common:errors",
        "//zetasql/parser/macros:macro_catalog",
        "//zetasql/public:error_helpers",
        "//zetasql/public:language_options",
        "//zetasql/public:options_cc_proto",
        "//zetasql/public/proto:logging_cc_proto",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:variant",
    ],
)

cc_library(
    name = "parse_tree",
    srcs = [
        "ast_node_internal.h",
        "parse_tree.cc",
        "parse_tree_accept_methods.inc",
        "parse_tree_errors.cc",
        "parse_tree_generated.cc",
    ],
    hdrs = [
        "ast_node.h",
        "ast_node_kind.h",
        "parse_tree.h",
        "parse_tree_decls.h",
        "parse_tree_errors.h",
        "parse_tree_generated.h",
        "parse_tree_visitor.h",
        "visit_result.h",
    ],
    tags = ["nofixdeps"],  # generated and real files are interdependent
    deps = [
        ":ast_enums_cc_proto",
        "//zetasql/base",
        "//zetasql/base:arena_allocator",
        "//zetasql/base:map_util",
        "//zetasql/base:ret_check",
        "//zetasql/base:status",
        "//zetasql/common:errors",
        "//zetasql/common:utf_util",
        "//zetasql/proto:internal_error_location_cc_proto",
        "//zetasql/public:deprecation_warning_cc_proto",
        "//zetasql/public:error_location_cc_proto",
        "//zetasql/public:id_string",
        "//zetasql/public:options_cc_proto",
        "//zetasql/public:parse_location",
        "//zetasql/public:strings",
        "//zetasql/public:type_cc_proto",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
    ],
)

cc_test(
    name = "parse_tree_test",
    size = "small",
    srcs = ["parse_tree_test.cc"],
    deps = [
        ":parse_tree",
        ":parser",
        "//zetasql/base:check",
        "//zetasql/base:status",
        "//zetasql/base/testing:status_matchers",
        "//zetasql/base/testing:zetasql_gtest_main",
        "//zetasql/common:errors",
        "//zetasql/common:status_payload_utils",
        "//zetasql/proto:internal_error_location_cc_proto",
        "//zetasql/public:error_helpers",
        "//zetasql/public:error_location_cc_proto",
        "//zetasql/public:parse_location",
        "//zetasql/testdata:test_schema_cc_proto",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_test(
    name = "parse_tree_errors_test",
    size = "small",
    srcs = ["parse_tree_errors_test.cc"],
    deps = [
        ":parse_tree",
        ":parser",
        "//zetasql/base:source_location",
        "//zetasql/base:status",
        "//zetasql/base/testing:status_matchers",
        "//zetasql/base/testing:zetasql_gtest_main",
        "//zetasql/common:status_payload_utils",
        "//zetasql/common/testing:proto_matchers",
        "//zetasql/testdata:test_schema_cc_proto",
        "@com_google_absl//absl/status",
    ],
)

cc_library(
    name = "run_parser_test_lib",
    testonly = 1,
    srcs = ["run_parser_test.cc"],
    deps = [
        ":deidentify",
        ":parser",
        "//zetasql/base:check",
        "//zetasql/base:edit_distance",
        "//zetasql/base:logging",
        "//zetasql/base:source_location",
        "//zetasql/base:status",
        "//zetasql/base/testing:status_matchers",
        "//zetasql/base/testing:zetasql_gtest_main",
        "//zetasql/public:error_helpers",
        "//zetasql/public:language_options",
        "//zetasql/public:options_cc_proto",
        "//zetasql/public:parse_helpers",
        "//zetasql/public:parse_location",
        "//zetasql/public:parse_resume_location",
        "//zetasql/public/testing:test_case_options_util",
        "//zetasql/scripting:parse_helpers",
        "//zetasql/scripting:script_segment",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "@com_google_file_based_test_driver//file_based_test_driver",
        "@com_google_file_based_test_driver//file_based_test_driver:run_test_case_result",
        "@com_google_file_based_test_driver//file_based_test_driver:test_case_options",
        "@com_googlesource_code_re2//:re2",
    ],
    # Otherwise tests in this .cc file may get dropped by the linker when statically linking tests
    # which depend on this library, since these tests aren't referenced from main.
    alwayslink = True,
)

cc_test(
    name = "unparser_test",
    size = "small",
    srcs = ["unparser_test.cc"],
    deps = [
        ":parser",
        "//zetasql/base/testing:status_matchers",
        "//zetasql/base/testing:zetasql_gtest_main",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "keywords",
    srcs = [
        "keywords.cc",
    ],
    hdrs = [
        "keywords.h",
    ],
    deps = [
        ":bison_token_codes",
        "//zetasql/base",
        "//zetasql/base:case",
        "//zetasql/base:map_util",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
    ],
)

cc_library(
    name = "bison_token_codes",
    hdrs = ["bison_token_codes.h"],
    deps = [":bison_token_codes_inc"],
)

# Used only to create a textual header with the generated code. Use the final .h from the other
# visible library.
cc_library(
    name = "bison_token_codes_inc",
    textual_hdrs = ["bison_token_codes.inc"],
)

genrule(
    name = "generate_bison_token_codes",
    srcs = ["bison_parser.bison.h"],
    outs = ["bison_token_codes.inc"],
    cmd = "awk '/      enum yytokentype/ {f = 1} {if (f && $$0 ~ /=/) print;}; /      };/ { f= 0 }' $(location bison_parser.bison.h) > $@",
)

cc_test(
    name = "keywords_test",
    srcs = ["keywords_test.cc"],
    data = [
        "bison_parser.y",
        "flex_tokenizer.l",
    ],
    deps = [
        ":keywords",
        "//zetasql/base",
        "//zetasql/base:path",
        "//zetasql/base/testing:zetasql_gtest_main",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "@com_googlesource_code_re2//:re2",
    ],
)

cc_library(
    name = "deidentify",
    srcs = ["deidentify.cc"],
    hdrs = ["deidentify.h"],
    deps = [
        ":parser",
        "//zetasql/base:status",
        "//zetasql/public:builtin_function_options",
        "//zetasql/public:catalog",
        "//zetasql/public:function",
        "//zetasql/public:language_options",
        "//zetasql/public:options_cc_proto",
        "//zetasql/public:parse_resume_location",
        "//zetasql/public:simple_catalog",
        "//zetasql/public:strings",
        "//zetasql/public:type_cc_proto",
        "//zetasql/public/types",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

cc_test(
    name = "deidentify_test",
    srcs = ["deidentify_test.cc"],
    deps = [
        ":deidentify",
        ":parse_tree",
        "//zetasql/base/testing:status_matchers",
        "//zetasql/base/testing:zetasql_gtest_main",
    ],
)

# Flex lexer
genlex(
    name = "flex_tokenizer_generated",
    src = "flex_tokenizer.l",
    out = "flex_tokenizer.flex.cc",
    includes = [
        "bison_parser.bison.h",
    ],
)

# Bison parser
genyacc(
    name = "bison_parser_generated",
    src = "bison_parser.y",
    header_out = "bison_parser.bison.h",
    source_out = "bison_parser.bison.cc",
)

[gen_parser_test(
    filename = f.split("/")[-1],
) for f in glob(
    ["testdata/*.test"],
    exclude = ["testdata/parse_tree_serializer.test"],
)]

bzl_library(
    name = "builddefs_bzl",
    srcs = ["builddefs.bzl"],
)

exports_files([
    "keywords.h",
    "unparser.h",
])
